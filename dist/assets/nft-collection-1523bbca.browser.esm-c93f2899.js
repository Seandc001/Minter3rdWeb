var d=Object.defineProperty;var l=(s,a,t)=>a in s?d(s,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[a]=t;var e=(s,a,t)=>(l(s,typeof a!="symbol"?a+"":a,t),t);import{N as g,k as W,A as C,l as f,a5 as w,m as y,p as T,G as R,o as E,q as S,r as b,s as c,T as A}from"./index-5c39588f.js";import{C as B}from"./contract-interceptor-d7b164a7.browser.esm-7eabd2ea.js";import{C as M,a as O}from"./contract-owner-14a6d0f9.browser.esm-08220fdf.js";import{C as k}from"./contract-platform-fee-fda88a0f.browser.esm-ef85ca3f.js";import{C as v}from"./contract-roles-65ac12a4.browser.esm-071af431.js";import{C as I}from"./contract-sales-5f56e732.browser.esm-65d15067.js";import{S as P}from"./erc-721-standard-8f50ffa0.browser.esm-8915e38b.js";import{E as x}from"./erc-721-926ec401.browser.esm-fbb9261a.js";import"./QueryParams-6f353fc1.browser.esm-aa15258c.js";import"./drop-claim-conditions-125436e5.browser.esm-fa5680ee.js";import"./index-8c15bcd5.js";const o=class o extends P{constructor(t,r,n){let h=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},i=arguments.length>4?arguments[4]:void 0,m=arguments.length>5?arguments[5]:void 0,u=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new W(t,r,i,h,n);super(u,n,m);e(this,"mint",c(async t=>this.erc721.mint.prepare(t)));e(this,"mintTo",c(async(t,r)=>this.erc721.mintTo.prepare(t,r)));e(this,"mintBatch",c(async t=>this.erc721.mintBatch.prepare(t)));e(this,"mintBatchTo",c(async(t,r)=>this.erc721.mintBatchTo.prepare(t,r)));e(this,"burn",c(t=>this.erc721.burn.prepare(t)));this.abi=C.parse(i||[]),this.metadata=new f(this.contractWrapper,w,this.storage),this.app=new y(this.contractWrapper,this.metadata,this.storage),this.roles=new v(this.contractWrapper,o.contractRoles),this.royalties=new M(this.contractWrapper,this.metadata),this.sales=new I(this.contractWrapper),this.encoder=new T(this.contractWrapper),this.estimator=new R(this.contractWrapper),this.events=new E(this.contractWrapper),this.platformFees=new k(this.contractWrapper),this.interceptor=new B(this.contractWrapper),this.signature=new x(this.contractWrapper,this.storage),this.owner=new O(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[S("transfer"),b])}async getMintTransaction(t,r){return this.erc721.getMintTransaction(t,r)}async prepare(t,r,n){return A.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:n})}async call(t,r,n){return this.contractWrapper.call(t,r,n)}};e(o,"contractRoles",g);let p=o;export{p as NFTCollection};
